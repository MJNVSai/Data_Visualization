q = c("Hockey","Football","Baseball","Curling","Rugby","Lacrosse","Basketball","Tennis","Cricket","Soccer")
theDF = data.frame(x,y,q)
theDF
list(theDF, 1:10)
list5 = list(theDF, 1:10, list3)
list5
names(list5)
names(list5) = c("data.frame","vector","list")
names(list5)
list5
list6 = list(TheDataFrame = theDF, TheVector = 1:10, TheList = list3)
names(list6)
list6
# Empty list creation
emptyList = vector(mode = "list", length = 4)
emptyList
#Accessing
list5[[1]]
list5[["data.frame"]]
list5[[1]]$q
list5[[1]][, "y"]
list5[[1]][, "y", drop = FALSE]
length(list5)
list5[[4]] <- 2
length(list5)
list5[["Newelement"]] <- 3:6
length(list5)
names(list5)
list5
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='', dbname='student', host='localhost')
mydb
dbListTables(mydb)
dbListFields(mydb, 'ddl_student')
rs = dbSendQuery(mydb, "select * from emp")
rs
data = fetch(rs, n=-1)
data
mydb = dbConnect(MySQL(), user='root', password='', dbname='student', host='localhost')
mydb
dbListTables(mydb)
dbListFields(mydb, 'ddl_student')
rs = dbSendQuery(mydb, "select * from ddl_student")
rs
data = fetch(rs, n=-1)
data
emp <- function(x)
{
xaverage = sum(x)/length(x)
print("average of vector : ")
print(xaverage)
xmean = mean(x)
print("Mean of Vector : ")
print(xmean)
xmedian = median(x)
print("Median of vector : ")
print(xmedian)
}
vect = c(1,2,3,4,5)
emp(vect)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='', dbname='ddl', host='localhost')
mydb
dbListTables(mydb)
dbListFields(mydb, 'employee')
rs = dbSendQuery(mydb, "select age from employee")
rs
data = fetch(rs, n=-1)
data
emp(data$age)
data
class(data)
data$age
name = c(' Mounav ', ' Rizwan ', ' Ajay ', ' Charan ', ' Vamsi ', ' M.sai ')
age  = c(19, 19, 20, 30, 18, 20)
desig = c(' Manager ', ' webprogramer ', ' cyber-manager ', ' Manager ', ' webprogramer ', ' Boss ')
df = data.frame(Employee = name, Age = age, Designation = desig)
df
ind = unique(desig)
des = c()
no = c()
for(i in 1:length(ind))
{
count = 0
for(j in 1 : length(desig))
{
if(ind[i] == desig[j])
{
count = count + 1
}
}
des = append(des,ind[i])
no = append(no,count)
}
des
no
result = data.frame("Designation" = ind, "Count" = no)
result
name1  <-  c('sai','geetha','ajay','Madhu','vamsi','Parveen')
gender  <- c('male','female','male','female','male','female')
mc = sum(gender == 'male')
fc = sum(gender == 'female')
print("No.of male employess : ")
mc
print("No.of female employess : ")
fc
f = function(x)
{
if(x < (1/2))
{
print(x)
}
else if((1/2) < x && x < 1)
{
print(1 - x)
}
else
{
print(0)
}
}
x = 0.3
f(x)
name = c(' Mounav ', ' Rizwan ', ' Ajay ', ' Charan ', ' Vamsi ', ' M.sai ')
age  = c(19, 19, 20, 30, 18, 20)
desig = c(' Manager ', ' webprogramer ', ' cyber-manager ', ' Manager ', ' webprogramer ', ' Boss ')
roll = c(1,2,3,4,5,6)
df = data.frame(Roll_no = roll, Employee = name, Age = age, Designation = desig)
df
hist(df$Age, main = "Age Graph", xlab = "age", ylab = "number")
plot(Age ~ Roll_no, data = df)
boxplot(df$Roll_no)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = df) + geom_histogram(aes(x = Age))
ggplot(df, aes(x = Roll_no, y = Age)) + geom_point()
ggplot(df, aes(y = Roll_no, x = 1)) + geom_boxplot()
ggplot(df, aes(y = Roll_no, x = 1)) + geom_violin()
ggplot(df, aes(y = Roll_no, x = "cut")) + geom_violin() + geom_point()
theMatrix = matrix(1:9, nrow = 3)
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 2, sum)
theMatrix[2,3] <- NA
apply(theMatrix, 1, sum)
apply(theMatrix, 1, sum, na.rm = TRUE)
rowSums(theMatrix, na.rm = TRUE)
colSums(theMatrix, na.rm = TRUE)
theList <- list(A = matrix(1:9,3), B = 1:5, C = matrix(1:4,2), D = 2)
theList
lapply(theList, sum) # returns list
sapply(theList, sum) # returns data frame
theNames <- c("Tyson", "Rizwanullah", "Dragon Emperor", "A.Charan")
lapply(theNames, nchar)
sapply(theNames, nchar)
f3 <- function(x,y)
{
NROW(x) + NCOL(y)
}
flist = list(A = matrix(1:16,4), B = matrix(1:16,2), C = 1:5)
flist
slist = list(A = matrix(1:16,4), B = matrix(1:16,2), C = 15:1)
slist
mapply(identical, flist, slist)
mapply(f3, flist, slist)
# using aggregate function
eid = c(2501 : 2509)
eid
ename = c("Rizwan", "Ajay", "Mounav", "Charan", "Srinivas", "Vamsi", "Deepak", "Abhi", "Pavan")
ename
desig = c("sales", "accounts", "manager", "sales", "sales", "accounts", "accounts", "manager", "sales")
desig
dept_id = c(10,10,10,10,20,20,20,30,30)
dept_id
salary = c(23000, 35000, 40000, 80000, 230000, 98000, 50000, 85000, 130000)
salary
employee = data.frame(eid, ename, desig, dept_id, salary)
employee
aggregate(salary~dept_id, employee, mean)
aggregate(salary~dept_id, employee, max)
aggregate(salary~dept_id+desig, employee, mean)
aggregate(salary~dept_id+desig, employee, min)
install.packages("plyr")
require("plyr")
employee1 = data.frame(eid, ename, desig, dept_id, salary)
employee1
employee1$eid[employee1$salary < 36000] <- 0
employee1
any(is.na(employee1$eid))
ddply(employee1)
ddply(employee1,sum)
install.packages("data.table")
require("data.table")
theDT = data.table(eid, ename, desig, dept_id, salary)
theDT
class(theDT$ename)
class(employee1$ename)
data.table(diamonds)
theDT[1:2,]
theDT[theDT$eid >= 2504]
theDT[, list(eid,desig)]
theDT[, ename]
theDT[, list(ename)]
theDT[, "ename", with = FALSE]
theDT[, c("ename","eid"), with = FALSE]
tables()
setkey(theDT, eid)
theDT
setkey(theDT, salary)
theDT
key(theDT)
tables()
theDT[c(10,30)]
theDT[theDT$salary > 50000]
setkey(theDT, desig, dept_id)
tables()
setkey(theDT, desig, dept_id, salary)
tables()
theDT
theDT[, mean(salary), by = dept_id]
theDT[, list(price = mean(salary)), by = dept_id]
theDT[, mean(salary), by = list(dept_id,desig)]
theDT[, list(price = mean(salary), desig = mean(eid)), by = dept_id]
data()
theMatrix = matrix(1:9, nrow = 3)
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 2, sum)
theMatrix[2,3] <- NA
apply(theMatrix, 1, sum)
apply(theMatrix, 1, sum, na.rm = TRUE)
rowSums(theMatrix, na.rm = TRUE)
colSums(theMatrix, na.rm = TRUE)
theList <- list(A = matrix(1:9,3), B = 1:5, C = matrix(1:4,2), D = 2)
theList
lapply(theList, sum) # returns list
sapply(theList, sum) # returns data frame
theNames <- c("Tyson", "Rizwanullah", "Dragon Emperor", "A.Charan")
lapply(theNames, nchar)
sapply(theNames, nchar)
f3 <- function(x,y)
{
NROW(x) + NCOL(y)
}
flist = list(A = matrix(1:16,4), B = matrix(1:16,2), C = 1:5)
flist
slist = list(A = matrix(1:16,4), B = matrix(1:16,2), C = 15:1)
slist
mapply(identical, flist, slist)
mapply(f3, flist, slist)
eid = c(2501 : 2509)
eid
ename = c("Rizwan", "Ajay", "Mounav", "Charan", "Srinivas", "Vamsi", "Deepak", "Abhi", "Pavan")
ename
desig = c("sales", "accounts", "manager", "sales", "sales", "accounts", "accounts", "manager", "sales")
desig
dept_id = c(10,10,10,10,20,20,20,30,30)
dept_id
salary = c(23000, 35000, 40000, 80000, 230000, 98000, 50000, 85000, 130000)
salary
employee = data.frame(eid, ename, desig, dept_id, salary)
employee
aggregate(salary~dept_id, employee, mean)
aggregate(salary~dept_id, employee, max)
aggregate(salary~dept_id+desig, employee, mean)
aggregate(salary~dept_id+desig, employee, min)
require("plyr")
employee1 = data.frame(eid, ename, desig, dept_id, salary)
employee1
employee1$eid[employee1$salary < 36000] <- 0
employee1
any(is.na(employee1$eid))
require("data.table")
theDT = data.table(eid, ename, desig, dept_id, salary)
theDT
class(theDT$ename)
class(employee1$ename)
theDT[1:2,]
theDT[theDT$eid >= 2504]
theDT[, list(eid,desig)]
theDT[, ename]
theDT[, list(ename)]
theDT[, "ename", with = FALSE]
theDT[, c("ename","eid"), with = FALSE]
tables()
setkey(theDT, salary)
theDT
key(theDT)
tables()
theDT[theDT$salary > 50000]
setkey(theDT, desig, dept_id, salary)
tables()
theDT
theDT[, mean(salary), by = dept_id]
theDT[, list(price = mean(salary)), by = dept_id]
theDT[, mean(salary), by = list(dept_id,desig)]
theDT[, list(price = mean(salary), desig = mean(eid)), by = dept_id]
exact_one = function(p)
{
notp = 1 - p
tot = 0.0
for(i in 1:length(p))
{
tot = tot + p[i] + prod(notp[-i])
}
return(tot)
}
v1 = c(1,2,3,4,5)
a1 = exact_one(v1)
a1
1 - v1
v1[-2]
cumsum(v1)
cumprod(v1)
class(cumsum(v1))
mat1 <- matrix(c(1,5,6,2,3,2), nrow = 3)
mat1
min(mat1[,1], mat1[,2])
pmin(mat1[,1], mat1[,2])
pmin(mat1[1,], mat1[2,], mat1[3,])
unsort = c(13,2,5,2,3)
sort(unsort)
unsort
order(unsort)
v2 = c('def', 'ab', 'zzzz')
v3 = c(2,5,1)
y = data.frame(v1 = v2, v2 = v3)
y
r <- order(y$v2)
r
z <- y[r,]
z
rank(v3)
rank(v1)
crossprod(1:3,c(5,12,13))
a = matrix(1:4, ncol = 2)
a
# Matrix Multiplication
a = matrix(1:4, ncol = 2, byrow = TRUE)
a
b = matrix(c(1,0,-1,1), nrow = 2)
b
mat_mul = a %*% b
mat_mul
s1 = matrix(c(1,1,-1,1), nrow = 2, ncol = 2)
s2 = c(2,4)
solve(s1,s2)
solve(s1)
q1 = matrix(1:9, nrow = 3)
q1
q1 = matrix(1:9, nrow = 3, byrow = TRUE)
q1
t(q1)
det(q1)
eigen(q1)
p <- c(1,2,5)
q <- c(5,1,8,9)
union(p,q)
intersect(p,q)
setdiff(p,q)
setdiff(q,p)
setequal(p,q)
setequal(p, c(1,2,5))
5 %in% x
5 %in% p
10 %in% q
choose(5,2)
choose(5,3)
f = c(1,2,5)
g = c(5,1,8,9)
symetric = function(a,b)
{
sx = setdiff(a,b)
sy = setdiff(b,a)
result = union(sx,sy)
return(result)
}
ans = symetric(f,g)
ans
library("ggplot2")
data("diamonds")
data1 = diamonds
data1
class(data1)
data2 = c(head(diamonds))
data2
data2 = data.frame(head(diamonds))
data2
class(data2)
boxplot(data2$price)
ggplot(data2$price, aes(x = x, y = y)) + geom_boxplot()
ggplot(data2, aes(x = 1, y = data2$price)) + geom_boxplot()
ggplot(data2, aes(x = x, y = y)) + geom_boxplot()
temp = data2$price
temp = data.frame(temp)
ggplot(temp, aes(x = x, y = y)) + geom_boxplot()
temp = data2$price
temp1 = data.frame(temp)
ggplot(temp1, aes(x = x, y = y)) + geom_boxplot()
name = c(' Mounav ', ' Rizwan ', ' Ajay ', ' Charan ', ' Vamsi ', ' M.sai ')
age  = c(19, 19, 20, 30, 18, 20)
desig = c(' Manager ', ' webprogramer ', ' cyber-manager ', ' Manager ', ' webprogramer ', ' Boss ')
roll = c(1,2,3,4,5,6)
df = data.frame(Roll_no = roll, Employee = name, Age = age, Designation = desig)
df
hist(df$Age, main = "Age Graph", xlab = "age", ylab = "number")
plot(Age ~ Roll_no, data = df)
boxplot(df$Roll_no)
library(ggplot2)
ggplot(data = df) + geom_histogram(aes(x = Age))
ggplot(df, aes(x = Roll_no, y = Age)) + geom_point()
ggplot(df, aes(y = Roll_no, x = 1)) + geom_boxplot()
ggplot(df, aes(x = Roll_no, y = 1)) + geom_boxplot()
ggplot(data2, aes(x = price, y = y)) + geom_boxplot()
ggplot(data2, aes(y = price, x = x)) + geom_boxplot()
ggplot(data2, aes(x = price, y = y)) + geom_boxplot()
ggplot(data2, aes(x = price, y = y, fill = label)) + geom_boxplot()
ggplot(data2, aes(x = price, y = y)) + geom_boxplot()
library("ggplot2")
data("diamonds")
data1 = diamonds
data1
class(data1)
data2 = data.frame(head(diamonds))
data2
ggplot(data2, aes(x = price, y = y)) + geom_boxplot()
age <- c(15, 20, 35, 11, 26, 85, 106, 17, 19, 18)
check = age[1]
check
age <- c(15, 20, 35, 11, 26, 85, 106, 17, 19, 18)
check = TRUE
check
while (check)
{
for (v1 in age)
{
if(v1 >= 18)
{
print("person with age ", v1, "is eligible for vote")
}
else
{
print("person with age ", v1, "is not eligible for vote")
}
}
check = FALSE
}
age <- c(15, 20, 35, 11, 26, 85, 106, 17, 19, 18)
check = TRUE
check
while (check)
{
for (v1 in age)
{
if(v1 >= 18)
{
print(paste("person with age ", v1, "is eligible for vote"))
}
else
{
print(paste("person with age ", v1, "is not eligible for vote"))
}
}
check = FALSE
}
a = c(1,2,3,4,5)
t.test(a, mu = 150)
b = t.test(a, mu = 150)
plot(b)
b = t.test(a, mu = 150)
b
c = c(10,11,12,13,14,15)
t.test(a, b, var.equal = TRUE)
c = c(10,11,12,13,14,15)
t.test(a, c, var.equal = TRUE)
t.test(a, c, paired = TRUE)
t.test(a, c, paired = TRUE)
require(graphics)
t.test(1:10, y = c(7:20))      # P = .00001855
t.test(1:10, y = c(7:20, 200)) # P = .1245    -- NOT significant anymore
## Classical example: Student's sleep data
plot(extra ~ group, data = sleep)
## Traditional interface
with(sleep, t.test(extra[group == 1], extra[group == 2]))
## Formula interface
t.test(extra ~ group, data = sleep)
## Formula interface to one-sample test
t.test(extra ~ 1, data = sleep)
## Formula interface to paired test
## The sleep data are actually paired, so could have been in wide format:
sleep2 <- reshape(sleep, direction = "wide",
idvar = "ID", timevar = "group")
t.test(Pair(extra.1, extra.2) ~ 1, data = sleep2)
library("readxl")
library(ggplot2)
getwd()
setwd(choose.dir())
getwd()
re = read_excel("Bank_analysis.xlsx")
re = data.frame(re)
re
class(re)
ggplot(re, aes(x = Bank.Deposits, y = 1)) + geom_boxplot()
ggplot(re, aes(x = Name, y = Bank.Loans)) + geom_point()
boxplot(re$Bank.Deposits,plot=TRUE)$out
ggplot(data = re) + geom_histogram(aes(x = re$Saving.Accounts))
barplot(re$Estimated.Income, names.arg = re$Name, xlab ="Names",
ylab ="Income",
main ="Bar Chart")
pie(re$Credit.Card.Balance, re$Nationality,
main = "PIE chart", col = rainbow(5))
